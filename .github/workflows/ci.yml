name: CI

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore --configuration Release
      - name: Start Redis
        run: docker run --name redis -p 6379:6379 -d redis
        shell: bash
      - name: Wait for Redis
        run: |
          for i in {1..10}; do
            docker exec redis redis-cli ping && break
            sleep 1
          done
        shell: bash
      - name: Test
        run: dotnet test --no-build --configuration Release

  hello-smoke:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      - name: Start Redis
        run: docker run --name redis -p 6379:6379 -d redis
        shell: bash
      - name: Wait for Redis
        run: |
          for i in {1..10}; do
            docker exec redis redis-cli ping && break
            sleep 1
          done
        shell: bash
      - name: HelloBot smoke
        run: dotnet test tests/Bot.Examples.HelloBot.Tests --configuration Release

  load-smoke:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      - name: Start Redis
        run: docker run --name redis -p 6379:6379 -d redis
        shell: bash
      - name: Wait for Redis
        run: |
          for i in {1..10}; do
            docker exec redis redis-cli ping && break
            sleep 1
          done
        shell: bash
      - name: Load smoke
        run: dotnet test --configuration Release --filter "Category=Load"

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            7.0.x
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore --configuration Release
      - name: Check licenses
        run: |
          dotnet tool install --global dotnet-project-licenses
          dotnet-project-licenses --project Bot.sln
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
      - name: Pack
        run: dotnet pack --no-build --configuration Release --output artifacts -p:Version=${{ steps.get_version.outputs.version }}
      - name: Pack template
        run: dotnet pack templates/Bot.Templates.csproj --no-build --configuration Release --output artifacts -p:Version=${{ steps.get_version.outputs.version }}
      - name: Sign packages
        if: env.SIGN_CERTIFICATE != ''
        run: |
          for pkg in artifacts/*.nupkg; do
            dotnet nuget sign "$pkg" --certificate-path "$SIGN_CERTIFICATE" --timestamper https://timestamp.digicert.com
          done
      - name: Publish packages
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push "artifacts/*.nupkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
